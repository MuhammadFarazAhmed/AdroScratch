Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\n  <component name=\"GradleSettings\">\n    <option name=\"linkedExternalProjectsSettings\">\n      <GradleProjectSettings>\n        <option name=\"testRunner\" value=\"GRADLE\" />\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\n        <option name=\"modules\">\n          <set>\n            <option value=\"$PROJECT_DIR$\" />\n            <option value=\"$PROJECT_DIR$/app\" />\n            <option value=\"$PROJECT_DIR$/app/auth\" />\n            <option value=\"$PROJECT_DIR$/auth\" />\n            <option value=\"$PROJECT_DIR$/base\" />\n            <option value=\"$PROJECT_DIR$/domain\" />\n            <option value=\"$PROJECT_DIR$/favorite\" />\n            <option value=\"$PROJECT_DIR$/home\" />\n            <option value=\"$PROJECT_DIR$/merchant\" />\n            <option value=\"$PROJECT_DIR$/model\" />\n            <option value=\"$PROJECT_DIR$/profile\" />\n            <option value=\"$PROJECT_DIR$/repositories\" />\n          </set>\n        </option>\n      </GradleProjectSettings>\n    </option>\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	
+++ b/.idea/gradle.xml	
@@ -7,6 +7,7 @@
         <option name="testRunner" value="GRADLE" />
         <option name="distributionType" value="DEFAULT_WRAPPED" />
         <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="gradleJvm" value="Embedded JDK" />
         <option name="modules">
           <set>
             <option value="$PROJECT_DIR$" />
Index: profile/src/main/java/com/example/profile/ui/ProfileScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.profile.ui\n\nimport androidx.compose.animation.core.animateFloatAsState\nimport androidx.compose.foundation.*\nimport androidx.compose.foundation.gestures.detectTapGestures\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.lazy.*\nimport androidx.compose.foundation.shape.RoundedCornerShape\nimport androidx.compose.material.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.runtime.mutableStateOf\nimport androidx.compose.runtime.remember\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.scale\nimport androidx.compose.ui.geometry.CornerRadius\nimport androidx.compose.ui.geometry.Offset\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.graphics.drawscope.Stroke\nimport androidx.compose.ui.graphics.vector.ImageVector\nimport androidx.compose.ui.input.pointer.pointerInput\nimport androidx.compose.ui.platform.LocalDensity\nimport androidx.compose.ui.res.vectorResource\nimport androidx.compose.ui.tooling.preview.Preview\nimport androidx.compose.ui.unit.Dp\nimport androidx.compose.ui.unit.dp\nimport androidx.hilt.navigation.compose.hiltViewModel\nimport androidx.paging.LoadState\nimport androidx.paging.compose.collectAsLazyPagingItems\nimport androidx.paging.compose.items\nimport androidx.paging.map\nimport com.example.adro.ErrorItem\nimport com.example.adro.LoadingItem\nimport com.example.adro.LoadingView\nimport com.example.adro.common.CommonUtilsExtension.applyPagination\nimport com.example.adro.common.HexToJetpackColor\nimport com.example.base.R\nimport com.example.profile.vm.ProfileViewModel\nimport kotlinx.coroutines.flow.flatMap\nimport kotlinx.coroutines.flow.map\nimport org.koin.androidx.compose.getViewModel\n\n\nenum class ProfileSections(val value: String) {\n    PROFILE_HEADER(\"profile_header\"), MY_ACCOUNT(\"my_account\"), REDEMPTIONS_DETAILS(\"redemption_details\"), SETTINGS(\n        \"settings\"\n    ),\n    HELP_SUPPORT(\"help_support\"), ABOUT(\"about\"), SIGN_OUT(\"signout\"),\n}\n\n@Composable\nfun ProfileScreen(vm: ProfileViewModel = getViewModel()) {\n\n    val lazySections = vm.sections.collectAsLazyPagingItems()\n\n    LazyColumn(Modifier.background(HexToJetpackColor.getColor(\"F1F1F1\"))) {\n\n        items(lazySections) { section ->\n\n            when (section?.sectionIdentifier) {\n\n                ProfileSections.PROFILE_HEADER.value -> ProfileSectionHeader()\n\n                ProfileSections.MY_ACCOUNT.value,\n                ProfileSections.REDEMPTIONS_DETAILS.value,\n                ProfileSections.SETTINGS.value,\n                ProfileSections.HELP_SUPPORT.value,\n                ProfileSections.ABOUT.value,\n                -> {\n                    ProfileSectionHeaderRow(section.sectionTitle)\n                    section.sectionData.forEach { item ->\n                        when (item.type) {\n                            \"arrow\" -> ProfileSectionArrow(item.title)\n                            \"text\" -> ProfileSectionText(item.title, item.desc)\n                            \"switch\" -> ProfileSectionSwitch(item.title, item.value)\n                            else -> ProfileSectionHeaderRow(section.sectionTitle)\n                        }\n                    }\n                }\n\n                ProfileSections.SIGN_OUT.value -> ProfileSectionSignOut()\n\n            }\n        }\n        lazySections.apply {\n            when {\n                loadState.refresh is LoadState.Loading -> {\n                    item { LoadingView(modifier = Modifier.fillParentMaxSize()) }\n                }\n                loadState.append is LoadState.Loading -> {\n                    item { LoadingItem() }\n                }\n                loadState.refresh is LoadState.Error -> {\n                    val e = lazySections.loadState.refresh as LoadState.Error\n                    item {\n                        ErrorItem(message = e.error.message,\n                            modifier = Modifier.fillParentMaxSize(),\n                            onClickRetry = { })\n                    }\n                }\n                loadState.append is LoadState.Error -> {\n                    val e = lazySections.loadState.append as LoadState.Error\n                    item {\n                        ErrorItem(\n                            message = e.error.message, onClickRetry = { vm.sections }\n                        )\n                    }\n                }\n            }\n        }\n    }\n}\n\n\n@Composable\nfun ProfileSectionHeader() {\n\n    Column(\n        modifier = Modifier\n            .fillMaxWidth()\n            .background(Color.Black)\n            .padding(16.dp),\n        horizontalAlignment = Alignment.CenterHorizontally\n    ) {\n\n        Text(\n            text = \"Hello Guest\",\n            modifier = Modifier.padding(vertical = 8.dp),\n            style = MaterialTheme.typography.h1,\n            color = Color.White\n        )\n        Text(\n            text = \"Do you have an Abu Dhabi Golden Visa ?\",\n            style = MaterialTheme.typography.h3,\n            modifier = Modifier.padding(vertical = 8.dp),\n            color = Color.White\n        )\n        Button(\n            onClick = { },\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(vertical = 8.dp),\n            colors = ButtonDefaults.buttonColors(backgroundColor = HexToJetpackColor.getColor(\"E41C38\"))\n        ) {\n            Text(\n                text = \"SignIn\",\n                modifier = Modifier.padding(vertical = 8.dp),\n                style = MaterialTheme.typography.body2,\n                color = Color.White\n            )\n        }\n        Button(\n            onClick = { },\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(vertical = 8.dp)\n                .border(1.dp, Color.White, RoundedCornerShape(4.dp))\n        ) {\n            Text(\n                text = \"Create new Account\",\n                modifier = Modifier.padding(vertical = 8.dp),\n                style = MaterialTheme.typography.body2,\n                color = Color.White\n            )\n        }\n\n    }\n\n}\n\n\n@Composable\nfun ProfileSectionHeaderRow(sectionTitle: String?) {\n    if (sectionTitle != ProfileSections.MY_ACCOUNT.value) Spacer(modifier = Modifier.padding(8.dp))\n    Row(\n        modifier = Modifier\n            .fillMaxWidth()\n            .background(Color.White)\n            .padding(horizontal = 16.dp),\n        verticalAlignment = Alignment.CenterVertically,\n        horizontalArrangement = Arrangement.Start\n    ) {\n        Text(\n            text = sectionTitle ?: \"\",\n            modifier = Modifier.padding(vertical = 8.dp),\n            style = MaterialTheme.typography.h1,\n            color = Color.Black\n        )\n    }\n}\n\n@Composable\nfun ProfileSectionArrow(title: String?) {\n    Row(\n        modifier = Modifier\n            .fillMaxWidth()\n            .background(Color.White)\n            .padding(16.dp),\n        verticalAlignment = Alignment.CenterVertically,\n        horizontalArrangement = Arrangement.SpaceBetween\n    ) {\n        Text(text = title ?: \"\")\n        Icon(\n            modifier = Modifier.size(24.dp),\n            tint = Color.LightGray,\n            imageVector = ImageVector.vectorResource(id = R.drawable.ic_baseline_chevron_right_24),\n            contentDescription = \"\"\n        )\n    }\n}\n\n@Composable\nfun ProfileSectionText(title: String?, value: String?) {\n    Row(\n        modifier = Modifier\n            .fillMaxWidth()\n            .background(Color.White)\n            .padding(16.dp),\n        verticalAlignment = Alignment.CenterVertically,\n        horizontalArrangement = Arrangement.SpaceBetween\n    ) {\n        Text(text = title ?: \"\")\n        Text(text = value ?: \"\")\n    }\n}\n\n@Composable\nfun ProfileSectionSwitch(title: String?, value: Int?) {\n    Row(\n        modifier = Modifier\n            .fillMaxWidth()\n            .background(Color.White)\n            .padding(16.dp),\n        verticalAlignment = Alignment.CenterVertically,\n        horizontalArrangement = Arrangement.SpaceBetween\n    ) {\n        Text(text = title ?: \"\")\n        CustomSwitch(initialValue = value == 1, gapBetweenThumbAndTrackEdge = 0.dp) { _ ->\n\n        }\n    }\n}\n\n@Composable\nfun ProfileSectionSignOut() {\n    Column(\n        modifier = Modifier\n            .fillMaxWidth()\n            .background(Color.White)\n            .padding(vertical = 8.dp)\n            .padding(16.dp),\n    ) {\n        Text(text = \"App version v1.0\")\n        Button(\n            elevation = ButtonDefaults.elevation(0.dp),\n            colors = ButtonDefaults.buttonColors(backgroundColor = Color.Transparent),\n            onClick = { },\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(vertical = 8.dp)\n                .border(1.dp, Color.Black, RoundedCornerShape(4.dp))\n        ) {\n            Text(\n                text = \"Sign Out\",\n                modifier = Modifier.padding(vertical = 8.dp),\n                style = MaterialTheme.typography.body2,\n                color = Color.Black\n            )\n        }\n    }\n}\n\n@Composable\nfun CustomSwitch(\n    scale: Float = 1f,\n    width: Dp = 38.dp,\n    height: Dp = 20.dp,\n    strokeWidth: Dp = 1.dp,\n    initialValue: Boolean = false,\n    checkedFillThumbColor: Color = Color(0xFFFFFFFF),\n    checkedTrackColor: Color = Color(0xFFACCCBC),\n    uncheckedTrackColor: Color = Color(0xBABABABA),\n    gapBetweenThumbAndTrackEdge: Dp = 4.dp,\n    callback: (checked: Boolean) -> Unit = {}\n) {\n    val switchON = remember {\n        mutableStateOf(initialValue) // Initially the switch is ON\n    }\n\n    val thumbRadius = (height / 2) - gapBetweenThumbAndTrackEdge\n\n    // To move thumb, we need to calculate the position (along x axis)\n    val animatePosition =\n        animateFloatAsState(targetValue = if (switchON.value) with(LocalDensity.current) { (width - thumbRadius - gapBetweenThumbAndTrackEdge).toPx() }\n        else with(LocalDensity.current) { (thumbRadius + gapBetweenThumbAndTrackEdge).toPx() })\n\n    Canvas(modifier = Modifier\n        .size(width = width, height = height)\n        .scale(scale = scale)\n        .pointerInput(Unit) {\n            detectTapGestures(onTap = {\n                // This is called when the user taps on the canvas\n                switchON.value = !switchON.value\n                callback(switchON.value)\n            })\n        }) {\n        // Track\n        drawRoundRect(\n            color = if (switchON.value) checkedTrackColor else uncheckedTrackColor,\n            cornerRadius = CornerRadius(x = 10.dp.toPx(), y = 10.dp.toPx()),\n            style = Stroke(width = strokeWidth.toPx())\n        )\n\n        // Track Fill Area\n        drawRoundRect(\n            color = if (switchON.value) checkedTrackColor else Color.White,\n            cornerRadius = CornerRadius(x = 10.dp.toPx(), y = 10.dp.toPx()),\n        )\n\n        // Thumb fill area\n        drawCircle(\n            color = if (switchON.value) checkedFillThumbColor else uncheckedTrackColor,\n            radius = thumbRadius.toPx(),\n            center = Offset(x = animatePosition.value, y = size.height / 2)\n        )\n\n        // Thumb track\n        drawCircle(\n            color = if (switchON.value) uncheckedTrackColor else uncheckedTrackColor,\n            radius = thumbRadius.toPx(),\n            center = Offset(x = animatePosition.value, y = size.height / 2),\n            style = Stroke(width = strokeWidth.toPx())\n        )\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/profile/src/main/java/com/example/profile/ui/ProfileScreen.kt b/profile/src/main/java/com/example/profile/ui/ProfileScreen.kt
--- a/profile/src/main/java/com/example/profile/ui/ProfileScreen.kt	
+++ b/profile/src/main/java/com/example/profile/ui/ProfileScreen.kt	
@@ -269,7 +269,7 @@
         }
     }
 }
-
+@Preview
 @Composable
 fun CustomSwitch(
     scale: Float = 1f,
